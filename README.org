#+TITLE:     PDF Tools README
#+AUTHOR:    Andreas Politz
#+EMAIL:     politza@fh-trier.de

** About this package
   PDF Tools is, among other things, a replacement of DocView for PDF
   files.  The key difference is, that pages are not prerendered by
   e.g. ghostscript and stored in the file-system, but rather created
   on-demand and stored in memory.

   This rendering is performed by a special library named, for
   whatever reason, poppler, running inside a server programm.  This
   programm is called ~epdfinfo~ and it's job is it to successively
   read requests from Emacs and produce the proper results, i.e. the
   PNG image of a PDF page.  Here are some reasons, why you might want
   to switch to PDF Tools for viewing PDF files.
   
   + Smoother Display :: Some care has been taken to get the page you
        care to look at as quickly as possible on the monitor. We use
        low compression PNG images, resulting in faster creation and
        loading times.  These images are kept in memory in a LRU
        cache, which is filled in the background with pages you are
        likely going to want to look at in the near feature.
   + No GB cache directory :: Almost everything happens in memory.
   + Keep the page in view :: As is common in other PDF viewer, the
        image may be fit to a window's width or height, even if it's
        size changes.  Slices are independent of the image size and
        it's pretty easy and fast to make those boring white borders
        go away.
   + Everything else :: Read on.

   Actually, displaying PDF files is just a small part of PDF Tools.
   Since poppler can provide us with all kinds of informations about a
   document and is also able to modify it, there is a lot more we can
   do with it.

** Features
*** View
    View PDF documents in a buffer with DocView like keybindings.
*** Isearch 
    Interactively search PDF documents like any other buffer. (Though
    there is currently no regexp support.)
*** Follow links
    Click on highlighted links, moving to some part of a different
    page, some external file, a website or any other URI.  Links may
    also be followed by keyboard commands.
*** Annotations
    Display and list text and markup annotations (like underline),
    edit their contents and attributes (e.g. color), move them around,
    delete them or create new ones and then save the modifications
    back to the PDF file. 
*** Attachments
    Save files attached to the PDF-file or list them in a dired buffer.
*** Outline
    Use imenu or a special buffer to examine and navigate the PDF's
    outline.
*** SyncTeX
    Jump from a position on a page directly to the TeX source and
    vice-versa.
*** Misc
   + Display PDF's metadata.
   + Select a region and kill the text from the PDF.
   + Search for occurrences of a string.
   + Keep track of visited pages via a history.
** Installation
*** Prerequisites
    You'll need GNU Emacs 24 and some form of a GNU/Linux OS.  Other
    operating systems are currently not supported (patches welcome).
    The following instructions assume a Debian-based system.  

    First make shure a suitable build-system is installed.  We need at
    least a C/C++ compiler (both ~gcc~ and ~g++~), ~make~ and
    ~automake~.

    Next we need to install a few libraries PDF Tools depends on, some
    of which are most likely already on your system.
#+begin_src sh
  \$ sudo aptitude install libpng-dev libz-dev 
  \$ sudo aptitude install libpoppler-glib-dev 
  \$ sudo aptitude install libpoppler-private-dev 
#+end_src
    If you are doing this on a recent Ubuntu system, the final command
    will probably give an error.  This should be no problem, since the
    Ubuntu people merged this package into the main ~libpoppler-dev~
    package.

    Debian wheezy comes with libpoppler version 0.18, which is pretty
    old.  The minimally required version is 0.16, but some features of
    PDF Tools depend on a more recent version of this library.  See
    the following table for what they are and what version is
    required.

    | You want to ...                             | Minimal required version |
    |---------------------------------------------+--------------------------|
    | modify text annotations.                    |                   0.19.4 |
    | search case-insensitive.                    |                     0.22 |
    | create markup (e.g. underline) annotations. |                     0.26 |
    |---------------------------------------------+--------------------------|

    In case you decide to install libpoppler from source, make shure
    to run it's configure script with the ~--enable-xpdf-headers~
    option.

    Finally there is one feature (following links of a PDF document by
    plain keystrokes) which requires imagemagick's convert utility.  You may
    install it like so:
#+begin_src sh
  \$ sudo aptitude install imagemagick
#+end_src
*** Compilation
    Now it's time to compile the source.  Since we are building from
    the git repository, we have to initialize the build-system first.
    There is a tiny script in the root directory doing this for us.
    
#+begin_src sh
    \$ cd /path/to/pdf-tools
    \$ ./autogen.sh
#+end_src

    Now comes the familiar
#+begin_src sh
  ./configure && make
#+end_src
    which should compile the source code and create a Emacs Lisp
    Package in the root directory. The configure script also tells you
    at the very end, which features, depending on the libpoppler
    version, will be available.  These commands should give no error,
    otherwise you are in trouble.

    If ~make~ produces the ELP file ~pdf-tools-0.40.tar~ you are fine.
    This package contains all the nescessary files for Emacs and may
    be installed via
#+begin_src sh
  \$ make install-package
#+end_src
    Alternatively start the one true Editor from the same directory
    and execute the command
#+begin_src elisp
  M-x package-install-file RET pdf-tools-0.40.tar RET
#+end_src
  
  To complete the installation process, you need to activate the
  package by putting
#+begin_src elisp
  (pdf-tools-install)
#+end_src
  somewhere in your ~.emacs~. Next you probably might want to take a
  look at the various features of what you've just installed.  The
  following two commands might be of help for doing so.
#+begin_src elisp
  M-x pdf-tools-help RET
  M-x pdf-tools-customize RET
#+end_src
  
# Local Variables:
# mode: org
# End:


